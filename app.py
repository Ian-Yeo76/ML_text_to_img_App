import tkinter as tk
import customtkinter as ctk

from PIL import ImageTk
from authtoken import auth_token

import torch
from torch import autocast
from diffusers import StableDiffusionPipeline

# Create the App
app = tk.Tk()
app.geometry("532x632")
app.title("Stable Bud")
ctk.set_appearance_mode("dark")

# Input prompt field
prompt = ctk.CTkEntry(master=app, height=40, width=512, font=("Arial", 20), text_color="black", fg_color="white")
prompt.place(x=10, y=10)

# Label to display the generated image
lmain = ctk.CTkLabel(master=app, height=512, width=512)
lmain.place(x=10, y=110)

# Load the model
model_id = "CompVis/stable-diffusion-v1-4"
device = "cpu"  # Change to "cuda" if you have a GPU
pipe = StableDiffusionPipeline.from_pretrained(model_id, revision="fp16", torch_dtype=torch.float32, use_auth_token=auth_token)
pipe.to(device)

# Function to generate image
def generate():
    with autocast(device):
        output = pipe(prompt.get(), guidance_scale=8.5)

    # Debugging print statements
    print("Pipeline Output:", output)
    print("Type of output:", type(output))

    # Ensure the output contains images
    if hasattr(output, "images") and output.images:
        image = output.images[0]  # Access the first image
        image.save("generatedimage.png")
        img = ImageTk.PhotoImage(image)
        lmain.configure(image=img)
        lmain.image = img  # Prevent garbage collection
    else:
        print("Error: No image was generated by the pipeline.")

# Button to trigger image generation
trigger = ctk.CTkButton(master=app, height=40, width=120, font=("Arial", 20), text_color="white", fg_color="blue", 
                        command=generate, text="Generate")
trigger.place(x=206, y=60)

# Run the app
app.mainloop()